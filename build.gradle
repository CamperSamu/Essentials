plugins {
    id 'java'
    id 'maven-publish'
    id 'net.minecrell.licenser' version "$licenser"
    id 'fabric-loom' version "$fabric_loom" apply false
    id 'org.jetbrains.kotlin.jvm' version "$kotlin"
    id "com.github.johnrengelman.shadow" version "5.2.0"
}

apply from: "dependencies.gradle"
// apply from: "https://github.com/FabricMC/fabric-docs/raw/master/gradle/ideconfig.gradle"

logger.lifecycle("""
	=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
	Building Essentials
	Version: $project.mod_version
	Minecraft Version: $project.minecraft
	Fabric-Loader Version: $project.fabric_loader

	Using:
	Fabric-API Version: $project.fabric_api
	PlayerAbilityLib Version: $project.playerabilitylib
	
	Output files will be in /build/libs
	=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
""")

version = project.mod_version + "+" + project.minecraft

allprojects {
    apply plugin: 'fabric-loom'
    apply plugin: 'maven-publish'
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'net.minecrell.licenser'
    apply plugin: 'com.github.johnrengelman.shadow'

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    group = "io.github.nyliummc.essentials"
    version = project.mod_version + "+" + project.minecraft

    setBuildDir(rootProject.getBuildDir())

    configurations {
        dev
        compile.extendsFrom shade
        modCompile.extendsFrom modShade
    }

    license {
        header = rootProject.file('LICENSE')
        include '**/*.java'
        include '**/*.kt'
        style.java = 'BLOCK_COMMENT'
        style.kt = 'BLOCK_COMMENT'
    }

    repositories {
        mavenCentral()
        jcenter()
        maven {
            name = "Jitpack"
            url = "https://jitpack.io"
        }
        maven {
            name = "Ladysnake Libs"
            url = "https://dl.bintray.com/ladysnake/libs"
        }
    }

    dependencies {
        // Kotlin Stdlib
        compileOnly libs.kotlin_stdlib

        minecraft(libs.minecraft) {
            transitive = false
        }
        mappings libs.yarn
        modCompileOnly libs.fabric_loader

        // Hard Dependencies
        modCompileOnly libs.fabric_api
        modCompileOnly libs.fabric_language_kotlin
        modCompileOnly(libs.playerabilitylib) { transitive = false }

        // Database
        compileOnly libs.exposed_core
        compileOnly libs.exposed_jdbc
        compileOnly libs.exposed_java_time

        // Database drivers
        compileOnly libs.postgresql
        compileOnly libs.mysql_connector_java
        compileOnly libs.sqlite_jdbc

        // Configs
        compileOnly libs.jackson_core
        compileOnly libs.jackson_kotlin
        compileOnly libs.jackson_yaml

        // Dependency Injection
        compileOnly libs.guice

        // We use checker for annotations
        compileOnly libs.checker_qual

        // TODO: Permissions
    }

    // Jars

    if (project.name.contains("-api")) {
        shadowJar {
            enabled = false
        }

        task sourcesJar(type: Jar, dependsOn: classes) {
            classifier = 'dev'
            from project.sourceSets.main.allSource
        }

    } else {
        jar {
            enabled = false
        }

        shadowJar {
            // Only shadow implementation/modImplementation
            configurations = [project.configurations.shade, project.configurations.modShade]
            classifier = "dev"
            minimize()
        }

        task sourcesJar(type: Jar, dependsOn: classes) {
            classifier = 'sources'
            from project.sourceSets.main.allSource
        }

        sourcesJar.dependsOn(shadowJar)
    }

    remapJar {
        input = file("${project.buildDir}/libs/$archivesBaseName-${project.version}-dev.jar")
        archiveName = "${archivesBaseName}-${project.version}.jar"
    }

    remapJar.dependsOn(sourcesJar)

    // Artifacts? Not sure why this is needed

    artifacts {
        dev file: file("${project.buildDir}/libs/$archivesBaseName-${project.version}-dev.jar"), type: "jar", builtBy: jar
    }

    // Set version in fabric.mod.json
    processResources {
        inputs.property "version", project.version

        from(sourceSets.main.resources.srcDirs) {
            include "fabric.mod.json"
            expand "version": project.version
        }

        from(sourceSets.main.resources.srcDirs) {
            exclude "fabric.mod.json"
        }
    }

    // Fix some kotlin warnings
    compileKotlin.kotlinOptions.jvmTarget = "1.8"
}

task licenseFormatAll
subprojects { p -> licenseFormatAll.dependsOn("${p.path}:licenseFormat") }

subprojects {
    runClient {
        enabled = false
    }
    runServer {
        enabled = false
    }
}

subprojects.each {
    if (!it.name.contains("-api")) {
        remapJar.dependsOn("${it.path}:remapJar")
    }
}


dependencies {
    afterEvaluate {
        subprojects.each {
            shade project(path: ":${it.name}", configuration: 'shadow')
            include project("${it.name}:")
        }
    }

    // Runtime Only Dependencies
    modRuntime(libs.modmenu) {
        transitive = false // Naughty mods who JIJ fabric api
    }
}

jar {
    enabled = false
}

shadowJar {
    // Only shadow implementation/modImplementation
    configurations = [project.configurations.shade, project.configurations.modShade]
    classifier = "dev"
    minimize()
}

remapJar.dependsOn(shadowJar)
